/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  serial,
  varchar,
  timestamp,
  numeric,
  boolean,
  jsonb,
  text,
  type AnyPgColumn,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum__locales = pgEnum('enum__locales', ['en', 'fr'])
export const enum_users_roles = pgEnum('enum_users_roles', ['super-admin', 'user'])
export const enum_users_tenants_roles = pgEnum('enum_users_tenants_roles', [
  'tenant-admin',
  'tenant-viewer',
])
export const enum_headers_navigation_link_navigation_child_link_type = pgEnum(
  'enum_headers_navigation_link_navigation_child_link_type',
  ['reference', 'custom'],
)
export const enum_headers_navigation_link_type = pgEnum('enum_headers_navigation_link_type', [
  'reference',
  'custom',
])
export const enum_pages_blocks_image_grid_images_link_type = pgEnum(
  'enum_pages_blocks_image_grid_images_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_banner_background = pgEnum('enum_pages_blocks_banner_background', [
  '',
  'primary',
  'black',
])
export const enum_pages_blocks_text_background = pgEnum('enum_pages_blocks_text_background', [
  '',
  'primary',
  'black',
])
export const enum_pages_blocks_three_columns_background = pgEnum(
  'enum_pages_blocks_three_columns_background',
  ['', 'primary', 'black'],
)
export const enum_pages_blocks_cards_background = pgEnum('enum_pages_blocks_cards_background', [
  '',
  'primary',
  'black',
])
export const enum_pages_blocks_hero_background = pgEnum('enum_pages_blocks_hero_background', [
  '',
  'primary',
  'black',
])
export const enum_pages_blocks_text_cards_background = pgEnum(
  'enum_pages_blocks_text_cards_background',
  ['', 'primary', 'black'],
)
export const enum_pages_blocks_two_columns_background = pgEnum(
  'enum_pages_blocks_two_columns_background',
  ['', 'primary', 'black'],
)
export const enum_pages_blocks_image_cards_cards_link_type = pgEnum(
  'enum_pages_blocks_image_cards_cards_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_image_cards_cards_link_appearance = pgEnum(
  'enum_pages_blocks_image_cards_cards_link_appearance',
  ['default', 'outline', 'button'],
)
export const enum_pages_blocks_image_cards_cards_link_size = pgEnum(
  'enum_pages_blocks_image_cards_cards_link_size',
  ['small', 'medium', 'large'],
)
export const enum_pages_blocks_image_cards_cards_link_color = pgEnum(
  'enum_pages_blocks_image_cards_cards_link_color',
  ['primary', 'secondary', 'black', 'white'],
)
export const enum_pages_status = pgEnum('enum_pages_status', ['draft', 'published'])
export const enum__pages_v_blocks_image_grid_images_link_type = pgEnum(
  'enum__pages_v_blocks_image_grid_images_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_banner_background = pgEnum(
  'enum__pages_v_blocks_banner_background',
  ['', 'primary', 'black'],
)
export const enum__pages_v_blocks_text_background = pgEnum('enum__pages_v_blocks_text_background', [
  '',
  'primary',
  'black',
])
export const enum__pages_v_blocks_three_columns_background = pgEnum(
  'enum__pages_v_blocks_three_columns_background',
  ['', 'primary', 'black'],
)
export const enum__pages_v_blocks_cards_background = pgEnum(
  'enum__pages_v_blocks_cards_background',
  ['', 'primary', 'black'],
)
export const enum__pages_v_blocks_hero_background = pgEnum('enum__pages_v_blocks_hero_background', [
  '',
  'primary',
  'black',
])
export const enum__pages_v_blocks_text_cards_background = pgEnum(
  'enum__pages_v_blocks_text_cards_background',
  ['', 'primary', 'black'],
)
export const enum__pages_v_blocks_two_columns_background = pgEnum(
  'enum__pages_v_blocks_two_columns_background',
  ['', 'primary', 'black'],
)
export const enum__pages_v_blocks_image_cards_cards_link_type = pgEnum(
  'enum__pages_v_blocks_image_cards_cards_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_image_cards_cards_link_appearance = pgEnum(
  'enum__pages_v_blocks_image_cards_cards_link_appearance',
  ['default', 'outline', 'button'],
)
export const enum__pages_v_blocks_image_cards_cards_link_size = pgEnum(
  'enum__pages_v_blocks_image_cards_cards_link_size',
  ['small', 'medium', 'large'],
)
export const enum__pages_v_blocks_image_cards_cards_link_color = pgEnum(
  'enum__pages_v_blocks_image_cards_cards_link_color',
  ['primary', 'secondary', 'black', 'white'],
)
export const enum__pages_v_version_status = pgEnum('enum__pages_v_version_status', [
  'draft',
  'published',
])
export const enum__pages_v_published_locale = pgEnum('enum__pages_v_published_locale', ['en', 'fr'])
export const enum_payload_jobs_log_task_slug = pgEnum('enum_payload_jobs_log_task_slug', [
  'inline',
  'schedulePublish',
])
export const enum_payload_jobs_log_state = pgEnum('enum_payload_jobs_log_state', [
  'failed',
  'succeeded',
])
export const enum_payload_jobs_task_slug = pgEnum('enum_payload_jobs_task_slug', [
  'inline',
  'schedulePublish',
])

export const users_roles = pgTable(
  'users_roles',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_users_roles('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('users_roles_order_idx').on(columns.order),
    parentIdx: index('users_roles_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [users.id],
      name: 'users_roles_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const users_tenants_roles = pgTable(
  'users_tenants_roles',
  {
    order: integer('order').notNull(),
    parent: varchar('parent_id').notNull(),
    value: enum_users_tenants_roles('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('users_tenants_roles_order_idx').on(columns.order),
    parentIdx: index('users_tenants_roles_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [users_tenants.id],
      name: 'users_tenants_roles_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const users_tenants = pgTable(
  'users_tenants',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    tenant: integer('tenant_id')
      .notNull()
      .references(() => tenants.id, {
        onDelete: 'set null',
      }),
  },
  (columns) => ({
    _orderIdx: index('users_tenants_order_idx').on(columns._order),
    _parentIDIdx: index('users_tenants_parent_id_idx').on(columns._parentID),
    users_tenants_tenant_idx: index('users_tenants_tenant_idx').on(columns.tenant),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_tenants_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    username: varchar('username'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_username_idx: index('users_username_idx').on(columns.username),
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const tenants = pgTable(
  'tenants',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    slug: varchar('slug').notNull(),
    domain: varchar('domain').notNull(),
    redirects: varchar('redirects'),
    hasCacheInvalidation: boolean('has_cache_invalidation'),
    urlCacheInvalidation: varchar('url_cache_invalidation'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    tenants_slug_idx: index('tenants_slug_idx').on(columns.slug),
    tenants_updated_at_idx: index('tenants_updated_at_idx').on(columns.updatedAt),
    tenants_created_at_idx: index('tenants_created_at_idx').on(columns.createdAt),
  }),
)

export const tenants_locales = pgTable(
  'tenants_locales',
  {
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    elasticsearch_product_index: varchar('elasticsearch_product_index'),
    elasticsearch_category_index: varchar('elasticsearch_category_index'),
    settings: jsonb('settings'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    tenants_meta_meta_image_idx: index('tenants_meta_meta_image_idx').on(
      columns.meta_image,
      columns._locale,
    ),
    _localeParent: uniqueIndex('tenants_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [tenants.id],
      name: 'tenants_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const headers_navigation_link_navigation_child = pgTable(
  'headers_navigation_link_navigation_child',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type:
      enum_headers_navigation_link_navigation_child_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('headers_navigation_link_navigation_child_order_idx').on(columns._order),
    _parentIDIdx: index('headers_navigation_link_navigation_child_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [headers_navigation.id],
      name: 'headers_navigation_link_navigation_child_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const headers_navigation = pgTable(
  'headers_navigation',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_headers_navigation_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('headers_navigation_order_idx').on(columns._order),
    _parentIDIdx: index('headers_navigation_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [headers.id],
      name: 'headers_navigation_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const headers = pgTable(
  'headers',
  {
    id: serial('id').primaryKey(),
    tenant: integer('tenant_id').references(() => tenants.id, {
      onDelete: 'set null',
    }),
    intro: varchar('intro'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    headers_tenant_idx: uniqueIndex('headers_tenant_idx').on(columns.tenant),
    headers_updated_at_idx: index('headers_updated_at_idx').on(columns.updatedAt),
    headers_created_at_idx: index('headers_created_at_idx').on(columns.createdAt),
  }),
)

export const headers_rels = pgTable(
  'headers_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
  },
  (columns) => ({
    order: index('headers_rels_order_idx').on(columns.order),
    parentIdx: index('headers_rels_parent_idx').on(columns.parent),
    pathIdx: index('headers_rels_path_idx').on(columns.path),
    headers_rels_pages_id_idx: index('headers_rels_pages_id_idx').on(columns.pagesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [headers.id],
      name: 'headers_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'headers_rels_pages_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_text_image = pgTable(
  'pages_blocks_text_image',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    richText: jsonb('rich_text'),
    reverse: boolean('reverse').default(false),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_text_image_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_text_image_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_text_image_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_text_image_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_text_image_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_image_grid_images = pgTable(
  'pages_blocks_image_grid_images',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    caption: jsonb('caption'),
    hasLink: boolean('has_link').default(false),
    link_type: enum_pages_blocks_image_grid_images_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_image_grid_images_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_image_grid_images_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_image_grid_images_locale_idx').on(columns._locale),
    pages_blocks_image_grid_images_image_idx: index('pages_blocks_image_grid_images_image_idx').on(
      columns.image,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_image_grid.id],
      name: 'pages_blocks_image_grid_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_image_grid = pgTable(
  'pages_blocks_image_grid',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    intro: jsonb('intro'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_image_grid_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_image_grid_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_image_grid_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_image_grid_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_image_grid_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_banner = pgTable(
  'pages_blocks_banner',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    background: enum_pages_blocks_banner_background('background'),
    content: jsonb('content'),
    backgroundImage: integer('background_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_banner_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_banner_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_banner_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_banner_locale_idx').on(columns._locale),
    pages_blocks_banner_background_image_idx: index('pages_blocks_banner_background_image_idx').on(
      columns.backgroundImage,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_banner_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_spacer = pgTable(
  'pages_blocks_spacer',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    padding: numeric('padding').default('2'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_spacer_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_spacer_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_spacer_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_spacer_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_spacer_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_product_grid = pgTable(
  'pages_blocks_product_grid',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    title: varchar('title'),
    products: jsonb('products'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_product_grid_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_product_grid_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_product_grid_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_product_grid_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_product_grid_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_text = pgTable(
  'pages_blocks_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    richText: jsonb('rich_text'),
    background: enum_pages_blocks_text_background('background'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_text_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_text_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_text_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_text_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_text_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_benefits_benefits = pgTable(
  'pages_blocks_benefits_benefits',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    icon: integer('icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_benefits_benefits_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_benefits_benefits_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_benefits_benefits_locale_idx').on(columns._locale),
    pages_blocks_benefits_benefits_icon_idx: index('pages_blocks_benefits_benefits_icon_idx').on(
      columns.icon,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_benefits.id],
      name: 'pages_blocks_benefits_benefits_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_benefits = pgTable(
  'pages_blocks_benefits',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_benefits_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_benefits_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_benefits_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_benefits_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_benefits_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_three_columns_cells = pgTable(
  'pages_blocks_three_columns_cells',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    content: jsonb('content'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_three_columns_cells_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_three_columns_cells_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_three_columns_cells_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_three_columns.id],
      name: 'pages_blocks_three_columns_cells_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_three_columns = pgTable(
  'pages_blocks_three_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    intro: jsonb('intro'),
    background: enum_pages_blocks_three_columns_background('background'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_three_columns_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_three_columns_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_three_columns_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_three_columns_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_three_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_cards_cards = pgTable(
  'pages_blocks_cards_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cards_cards_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cards_cards_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_cards_cards_locale_idx').on(columns._locale),
    pages_blocks_cards_cards_image_idx: index('pages_blocks_cards_cards_image_idx').on(
      columns.image,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_cards.id],
      name: 'pages_blocks_cards_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_cards = pgTable(
  'pages_blocks_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    content: jsonb('content'),
    background: enum_pages_blocks_cards_background('background'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cards_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cards_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_cards_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_cards_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_hero = pgTable(
  'pages_blocks_hero',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    content: jsonb('content'),
    backgroundImage: integer('background_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    background: enum_pages_blocks_hero_background('background'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_hero_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_hero_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_hero_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_hero_locale_idx').on(columns._locale),
    pages_blocks_hero_background_image_idx: index('pages_blocks_hero_background_image_idx').on(
      columns.backgroundImage,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_hero_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_text_cards_cards = pgTable(
  'pages_blocks_text_cards_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    content: jsonb('content'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_text_cards_cards_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_text_cards_cards_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_text_cards_cards_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_text_cards.id],
      name: 'pages_blocks_text_cards_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_text_cards = pgTable(
  'pages_blocks_text_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    content: jsonb('content'),
    background: enum_pages_blocks_text_cards_background('background'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_text_cards_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_text_cards_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_text_cards_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_text_cards_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_text_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_two_columns_cells = pgTable(
  'pages_blocks_two_columns_cells',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    content: jsonb('content'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_two_columns_cells_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_two_columns_cells_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_two_columns_cells_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_two_columns.id],
      name: 'pages_blocks_two_columns_cells_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_two_columns = pgTable(
  'pages_blocks_two_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    intro: jsonb('intro'),
    background: enum_pages_blocks_two_columns_background('background'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_two_columns_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_two_columns_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_two_columns_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_two_columns_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_two_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_image_cards_cards = pgTable(
  'pages_blocks_image_cards_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    text: jsonb('text'),
    link_type: enum_pages_blocks_image_cards_cards_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_image_cards_cards_link_appearance('link_appearance').default('default'),
    link_size: enum_pages_blocks_image_cards_cards_link_size('link_size'),
    link_color: enum_pages_blocks_image_cards_cards_link_color('link_color'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_image_cards_cards_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_image_cards_cards_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_image_cards_cards_locale_idx').on(columns._locale),
    pages_blocks_image_cards_cards_image_idx: index('pages_blocks_image_cards_cards_image_idx').on(
      columns.image,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_image_cards.id],
      name: 'pages_blocks_image_cards_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_image_cards = pgTable(
  'pages_blocks_image_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_image_cards_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_image_cards_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_image_cards_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_image_cards_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_image_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages = pgTable(
  'pages',
  {
    id: serial('id').primaryKey(),
    tenant: integer('tenant_id').references(() => tenants.id, {
      onDelete: 'set null',
    }),
    parent: integer('parent_id').references((): AnyPgColumn => pages.id, {
      onDelete: 'set null',
    }),
    location: varchar('location'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_pages_status('_status').default('draft'),
  },
  (columns) => ({
    pages_tenant_idx: index('pages_tenant_idx').on(columns.tenant),
    pages_parent_idx: index('pages_parent_idx').on(columns.parent),
    pages_location_idx: index('pages_location_idx').on(columns.location),
    pages_updated_at_idx: index('pages_updated_at_idx').on(columns.updatedAt),
    pages_created_at_idx: index('pages_created_at_idx').on(columns.createdAt),
    pages__status_idx: index('pages__status_idx').on(columns._status),
  }),
)

export const pages_locales = pgTable(
  'pages_locales',
  {
    title: varchar('title'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    slug: varchar('slug'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    pages_meta_meta_image_idx: index('pages_meta_meta_image_idx').on(
      columns.meta_image,
      columns._locale,
    ),
    pages_slug_idx: index('pages_slug_idx').on(columns.slug, columns._locale),
    _localeParent: uniqueIndex('pages_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_rels = pgTable(
  'pages_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    locale: enum__locales('locale'),
    mediaID: integer('media_id'),
    pagesID: integer('pages_id'),
  },
  (columns) => ({
    order: index('pages_rels_order_idx').on(columns.order),
    parentIdx: index('pages_rels_parent_idx').on(columns.parent),
    pathIdx: index('pages_rels_path_idx').on(columns.path),
    localeIdx: index('pages_rels_locale_idx').on(columns.locale),
    pages_rels_media_id_idx: index('pages_rels_media_id_idx').on(columns.mediaID, columns.locale),
    pages_rels_pages_id_idx: index('pages_rels_pages_id_idx').on(columns.pagesID, columns.locale),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [pages.id],
      name: 'pages_rels_parent_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'pages_rels_media_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'pages_rels_pages_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_text_image = pgTable(
  '_pages_v_blocks_text_image',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    richText: jsonb('rich_text'),
    reverse: boolean('reverse').default(false),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_text_image_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_text_image_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_text_image_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_text_image_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_text_image_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_image_grid_images = pgTable(
  '_pages_v_blocks_image_grid_images',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    caption: jsonb('caption'),
    hasLink: boolean('has_link').default(false),
    link_type: enum__pages_v_blocks_image_grid_images_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_image_grid_images_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_image_grid_images_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_blocks_image_grid_images_locale_idx').on(columns._locale),
    _pages_v_blocks_image_grid_images_image_idx: index(
      '_pages_v_blocks_image_grid_images_image_idx',
    ).on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_image_grid.id],
      name: '_pages_v_blocks_image_grid_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_image_grid = pgTable(
  '_pages_v_blocks_image_grid',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    intro: jsonb('intro'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_image_grid_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_image_grid_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_image_grid_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_image_grid_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_image_grid_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_banner = pgTable(
  '_pages_v_blocks_banner',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    background: enum__pages_v_blocks_banner_background('background'),
    content: jsonb('content'),
    backgroundImage: integer('background_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_banner_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_banner_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_banner_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_banner_locale_idx').on(columns._locale),
    _pages_v_blocks_banner_background_image_idx: index(
      '_pages_v_blocks_banner_background_image_idx',
    ).on(columns.backgroundImage),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_banner_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_spacer = pgTable(
  '_pages_v_blocks_spacer',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    padding: numeric('padding').default('2'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_spacer_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_spacer_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_spacer_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_spacer_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_spacer_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_product_grid = pgTable(
  '_pages_v_blocks_product_grid',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    title: varchar('title'),
    products: jsonb('products'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_product_grid_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_product_grid_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_product_grid_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_product_grid_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_product_grid_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_text = pgTable(
  '_pages_v_blocks_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    richText: jsonb('rich_text'),
    background: enum__pages_v_blocks_text_background('background'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_text_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_text_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_text_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_text_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_text_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_benefits_benefits = pgTable(
  '_pages_v_blocks_benefits_benefits',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    icon: integer('icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_benefits_benefits_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_benefits_benefits_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_blocks_benefits_benefits_locale_idx').on(columns._locale),
    _pages_v_blocks_benefits_benefits_icon_idx: index(
      '_pages_v_blocks_benefits_benefits_icon_idx',
    ).on(columns.icon),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_benefits.id],
      name: '_pages_v_blocks_benefits_benefits_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_benefits = pgTable(
  '_pages_v_blocks_benefits',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_benefits_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_benefits_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_benefits_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_benefits_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_benefits_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_three_columns_cells = pgTable(
  '_pages_v_blocks_three_columns_cells',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    content: jsonb('content'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_three_columns_cells_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_three_columns_cells_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_blocks_three_columns_cells_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_three_columns.id],
      name: '_pages_v_blocks_three_columns_cells_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_three_columns = pgTable(
  '_pages_v_blocks_three_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    intro: jsonb('intro'),
    background: enum__pages_v_blocks_three_columns_background('background'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_three_columns_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_three_columns_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_three_columns_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_three_columns_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_three_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_cards_cards = pgTable(
  '_pages_v_blocks_cards_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cards_cards_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cards_cards_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_blocks_cards_cards_locale_idx').on(columns._locale),
    _pages_v_blocks_cards_cards_image_idx: index('_pages_v_blocks_cards_cards_image_idx').on(
      columns.image,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_cards.id],
      name: '_pages_v_blocks_cards_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_cards = pgTable(
  '_pages_v_blocks_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    content: jsonb('content'),
    background: enum__pages_v_blocks_cards_background('background'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cards_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cards_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_cards_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_cards_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_hero = pgTable(
  '_pages_v_blocks_hero',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    content: jsonb('content'),
    backgroundImage: integer('background_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    background: enum__pages_v_blocks_hero_background('background'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_hero_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_hero_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_hero_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_hero_locale_idx').on(columns._locale),
    _pages_v_blocks_hero_background_image_idx: index(
      '_pages_v_blocks_hero_background_image_idx',
    ).on(columns.backgroundImage),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_hero_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_text_cards_cards = pgTable(
  '_pages_v_blocks_text_cards_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    content: jsonb('content'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_text_cards_cards_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_text_cards_cards_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_blocks_text_cards_cards_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_text_cards.id],
      name: '_pages_v_blocks_text_cards_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_text_cards = pgTable(
  '_pages_v_blocks_text_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    content: jsonb('content'),
    background: enum__pages_v_blocks_text_cards_background('background'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_text_cards_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_text_cards_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_text_cards_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_text_cards_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_text_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_two_columns_cells = pgTable(
  '_pages_v_blocks_two_columns_cells',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    content: jsonb('content'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_two_columns_cells_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_two_columns_cells_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_blocks_two_columns_cells_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_two_columns.id],
      name: '_pages_v_blocks_two_columns_cells_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_two_columns = pgTable(
  '_pages_v_blocks_two_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    intro: jsonb('intro'),
    background: enum__pages_v_blocks_two_columns_background('background'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_two_columns_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_two_columns_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_two_columns_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_two_columns_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_two_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_image_cards_cards = pgTable(
  '_pages_v_blocks_image_cards_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    text: jsonb('text'),
    link_type: enum__pages_v_blocks_image_cards_cards_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_image_cards_cards_link_appearance('link_appearance').default('default'),
    link_size: enum__pages_v_blocks_image_cards_cards_link_size('link_size'),
    link_color: enum__pages_v_blocks_image_cards_cards_link_color('link_color'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_image_cards_cards_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_image_cards_cards_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_blocks_image_cards_cards_locale_idx').on(columns._locale),
    _pages_v_blocks_image_cards_cards_image_idx: index(
      '_pages_v_blocks_image_cards_cards_image_idx',
    ).on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_image_cards.id],
      name: '_pages_v_blocks_image_cards_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_image_cards = pgTable(
  '_pages_v_blocks_image_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    enabled: boolean('enabled').default(true),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_image_cards_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_image_cards_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_image_cards_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_image_cards_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_image_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v = pgTable(
  '_pages_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    version_tenant: integer('version_tenant_id').references(() => tenants.id, {
      onDelete: 'set null',
    }),
    version_parent: integer('version_parent_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    version_location: varchar('version_location'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__pages_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    snapshot: boolean('snapshot'),
    publishedLocale: enum__pages_v_published_locale('published_locale'),
    latest: boolean('latest'),
  },
  (columns) => ({
    _pages_v_parent_idx: index('_pages_v_parent_idx').on(columns.parent),
    _pages_v_version_version_tenant_idx: index('_pages_v_version_version_tenant_idx').on(
      columns.version_tenant,
    ),
    _pages_v_version_version_parent_idx: index('_pages_v_version_version_parent_idx').on(
      columns.version_parent,
    ),
    _pages_v_version_version_location_idx: index('_pages_v_version_version_location_idx').on(
      columns.version_location,
    ),
    _pages_v_version_version_updated_at_idx: index('_pages_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _pages_v_version_version_created_at_idx: index('_pages_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _pages_v_version_version__status_idx: index('_pages_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _pages_v_created_at_idx: index('_pages_v_created_at_idx').on(columns.createdAt),
    _pages_v_updated_at_idx: index('_pages_v_updated_at_idx').on(columns.updatedAt),
    _pages_v_snapshot_idx: index('_pages_v_snapshot_idx').on(columns.snapshot),
    _pages_v_published_locale_idx: index('_pages_v_published_locale_idx').on(
      columns.publishedLocale,
    ),
    _pages_v_latest_idx: index('_pages_v_latest_idx').on(columns.latest),
  }),
)

export const _pages_v_locales = pgTable(
  '_pages_v_locales',
  {
    version_title: varchar('version_title'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_slug: varchar('version_slug'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _pages_v_version_meta_version_meta_image_idx: index(
      '_pages_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image, columns._locale),
    _pages_v_version_version_slug_idx: index('_pages_v_version_version_slug_idx').on(
      columns.version_slug,
      columns._locale,
    ),
    _localeParent: uniqueIndex('_pages_v_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_rels = pgTable(
  '_pages_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    locale: enum__locales('locale'),
    mediaID: integer('media_id'),
    pagesID: integer('pages_id'),
  },
  (columns) => ({
    order: index('_pages_v_rels_order_idx').on(columns.order),
    parentIdx: index('_pages_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_pages_v_rels_path_idx').on(columns.path),
    localeIdx: index('_pages_v_rels_locale_idx').on(columns.locale),
    _pages_v_rels_media_id_idx: index('_pages_v_rels_media_id_idx').on(
      columns.mediaID,
      columns.locale,
    ),
    _pages_v_rels_pages_id_idx: index('_pages_v_rels_pages_id_idx').on(
      columns.pagesID,
      columns.locale,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_rels_parent_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: '_pages_v_rels_media_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: '_pages_v_rels_pages_fk',
    }).onDelete('cascade'),
  }),
)

export const footers_columns = pgTable(
  'footers_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    content: jsonb('content'),
  },
  (columns) => ({
    _orderIdx: index('footers_columns_order_idx').on(columns._order),
    _parentIDIdx: index('footers_columns_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footers.id],
      name: 'footers_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const footers = pgTable(
  'footers',
  {
    id: serial('id').primaryKey(),
    tenant: integer('tenant_id').references(() => tenants.id, {
      onDelete: 'set null',
    }),
    baseline: jsonb('baseline'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    footers_tenant_idx: uniqueIndex('footers_tenant_idx').on(columns.tenant),
    footers_updated_at_idx: index('footers_updated_at_idx').on(columns.updatedAt),
    footers_created_at_idx: index('footers_created_at_idx').on(columns.createdAt),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt'),
    caption: jsonb('caption'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: varchar('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: varchar('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: varchar('sizes_thumbnail_filename'),
    sizes_square_url: varchar('sizes_square_url'),
    sizes_square_width: numeric('sizes_square_width'),
    sizes_square_height: numeric('sizes_square_height'),
    sizes_square_mimeType: varchar('sizes_square_mime_type'),
    sizes_square_filesize: numeric('sizes_square_filesize'),
    sizes_square_filename: varchar('sizes_square_filename'),
    sizes_small_url: varchar('sizes_small_url'),
    sizes_small_width: numeric('sizes_small_width'),
    sizes_small_height: numeric('sizes_small_height'),
    sizes_small_mimeType: varchar('sizes_small_mime_type'),
    sizes_small_filesize: numeric('sizes_small_filesize'),
    sizes_small_filename: varchar('sizes_small_filename'),
    sizes_medium_url: varchar('sizes_medium_url'),
    sizes_medium_width: numeric('sizes_medium_width'),
    sizes_medium_height: numeric('sizes_medium_height'),
    sizes_medium_mimeType: varchar('sizes_medium_mime_type'),
    sizes_medium_filesize: numeric('sizes_medium_filesize'),
    sizes_medium_filename: varchar('sizes_medium_filename'),
    sizes_large_url: varchar('sizes_large_url'),
    sizes_large_width: numeric('sizes_large_width'),
    sizes_large_height: numeric('sizes_large_height'),
    sizes_large_mimeType: varchar('sizes_large_mime_type'),
    sizes_large_filesize: numeric('sizes_large_filesize'),
    sizes_large_filename: varchar('sizes_large_filename'),
    sizes_xlarge_url: varchar('sizes_xlarge_url'),
    sizes_xlarge_width: numeric('sizes_xlarge_width'),
    sizes_xlarge_height: numeric('sizes_xlarge_height'),
    sizes_xlarge_mimeType: varchar('sizes_xlarge_mime_type'),
    sizes_xlarge_filesize: numeric('sizes_xlarge_filesize'),
    sizes_xlarge_filename: varchar('sizes_xlarge_filename'),
    sizes_og_url: varchar('sizes_og_url'),
    sizes_og_width: numeric('sizes_og_width'),
    sizes_og_height: numeric('sizes_og_height'),
    sizes_og_mimeType: varchar('sizes_og_mime_type'),
    sizes_og_filesize: numeric('sizes_og_filesize'),
    sizes_og_filename: varchar('sizes_og_filename'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      'media_sizes_thumbnail_sizes_thumbnail_filename_idx',
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_square_sizes_square_filename_idx: index(
      'media_sizes_square_sizes_square_filename_idx',
    ).on(columns.sizes_square_filename),
    media_sizes_small_sizes_small_filename_idx: index(
      'media_sizes_small_sizes_small_filename_idx',
    ).on(columns.sizes_small_filename),
    media_sizes_medium_sizes_medium_filename_idx: index(
      'media_sizes_medium_sizes_medium_filename_idx',
    ).on(columns.sizes_medium_filename),
    media_sizes_large_sizes_large_filename_idx: index(
      'media_sizes_large_sizes_large_filename_idx',
    ).on(columns.sizes_large_filename),
    media_sizes_xlarge_sizes_xlarge_filename_idx: index(
      'media_sizes_xlarge_sizes_xlarge_filename_idx',
    ).on(columns.sizes_xlarge_filename),
    media_sizes_og_sizes_og_filename_idx: index('media_sizes_og_sizes_og_filename_idx').on(
      columns.sizes_og_filename,
    ),
  }),
)

export const media_rels = pgTable(
  'media_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    'media-tagID': integer('media_tag_id'),
  },
  (columns) => ({
    order: index('media_rels_order_idx').on(columns.order),
    parentIdx: index('media_rels_parent_idx').on(columns.parent),
    pathIdx: index('media_rels_path_idx').on(columns.path),
    media_rels_media_tag_id_idx: index('media_rels_media_tag_id_idx').on(columns['media-tagID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [media.id],
      name: 'media_rels_parent_fk',
    }).onDelete('cascade'),
    'media-tagIdFk': foreignKey({
      columns: [columns['media-tagID']],
      foreignColumns: [media_tag.id],
      name: 'media_rels_media_tag_fk',
    }).onDelete('cascade'),
  }),
)

export const media_tag = pgTable(
  'media_tag',
  {
    id: serial('id').primaryKey(),
    label: varchar('label').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    media_tag_updated_at_idx: index('media_tag_updated_at_idx').on(columns.updatedAt),
    media_tag_created_at_idx: index('media_tag_created_at_idx').on(columns.createdAt),
  }),
)

export const search_categories = pgTable(
  'search_categories',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    relationTo: varchar('relation_to'),
    title: varchar('title'),
  },
  (columns) => ({
    _orderIdx: index('search_categories_order_idx').on(columns._order),
    _parentIDIdx: index('search_categories_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [search.id],
      name: 'search_categories_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const search = pgTable(
  'search',
  {
    id: serial('id').primaryKey(),
    priority: numeric('priority'),
    slug: varchar('slug'),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    search_slug_idx: index('search_slug_idx').on(columns.slug),
    search_meta_meta_image_idx: index('search_meta_meta_image_idx').on(columns.meta_image),
    search_updated_at_idx: index('search_updated_at_idx').on(columns.updatedAt),
    search_created_at_idx: index('search_created_at_idx').on(columns.createdAt),
  }),
)

export const search_locales = pgTable(
  'search_locales',
  {
    title: varchar('title'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('search_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [search.id],
      name: 'search_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const search_rels = pgTable(
  'search_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
  },
  (columns) => ({
    order: index('search_rels_order_idx').on(columns.order),
    parentIdx: index('search_rels_parent_idx').on(columns.parent),
    pathIdx: index('search_rels_path_idx').on(columns.path),
    search_rels_pages_id_idx: index('search_rels_pages_id_idx').on(columns.pagesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [search.id],
      name: 'search_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'search_rels_pages_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_jobs_log = pgTable(
  'payload_jobs_log',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    executedAt: timestamp('executed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    completedAt: timestamp('completed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    taskSlug: enum_payload_jobs_log_task_slug('task_slug').notNull(),
    taskID: varchar('task_i_d').notNull(),
    input: jsonb('input'),
    output: jsonb('output'),
    state: enum_payload_jobs_log_state('state').notNull(),
    error: jsonb('error'),
  },
  (columns) => ({
    _orderIdx: index('payload_jobs_log_order_idx').on(columns._order),
    _parentIDIdx: index('payload_jobs_log_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_jobs_log_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_jobs = pgTable(
  'payload_jobs',
  {
    id: serial('id').primaryKey(),
    input: jsonb('input'),
    completedAt: timestamp('completed_at', { mode: 'string', withTimezone: true, precision: 3 }),
    totalTried: numeric('total_tried').default('0'),
    hasError: boolean('has_error').default(false),
    error: jsonb('error'),
    taskSlug: enum_payload_jobs_task_slug('task_slug'),
    queue: varchar('queue').default('default'),
    waitUntil: timestamp('wait_until', { mode: 'string', withTimezone: true, precision: 3 }),
    processing: boolean('processing').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_jobs_completed_at_idx: index('payload_jobs_completed_at_idx').on(columns.completedAt),
    payload_jobs_total_tried_idx: index('payload_jobs_total_tried_idx').on(columns.totalTried),
    payload_jobs_has_error_idx: index('payload_jobs_has_error_idx').on(columns.hasError),
    payload_jobs_task_slug_idx: index('payload_jobs_task_slug_idx').on(columns.taskSlug),
    payload_jobs_queue_idx: index('payload_jobs_queue_idx').on(columns.queue),
    payload_jobs_wait_until_idx: index('payload_jobs_wait_until_idx').on(columns.waitUntil),
    payload_jobs_processing_idx: index('payload_jobs_processing_idx').on(columns.processing),
    payload_jobs_updated_at_idx: index('payload_jobs_updated_at_idx').on(columns.updatedAt),
    payload_jobs_created_at_idx: index('payload_jobs_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    tenantsID: integer('tenants_id'),
    headersID: integer('headers_id'),
    pagesID: integer('pages_id'),
    footersID: integer('footers_id'),
    mediaID: integer('media_id'),
    'media-tagID': integer('media_tag_id'),
    searchID: integer('search_id'),
    'payload-jobsID': integer('payload_jobs_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_tenants_id_idx: index(
      'payload_locked_documents_rels_tenants_id_idx',
    ).on(columns.tenantsID),
    payload_locked_documents_rels_headers_id_idx: index(
      'payload_locked_documents_rels_headers_id_idx',
    ).on(columns.headersID),
    payload_locked_documents_rels_pages_id_idx: index(
      'payload_locked_documents_rels_pages_id_idx',
    ).on(columns.pagesID),
    payload_locked_documents_rels_footers_id_idx: index(
      'payload_locked_documents_rels_footers_id_idx',
    ).on(columns.footersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_media_tag_id_idx: index(
      'payload_locked_documents_rels_media_tag_id_idx',
    ).on(columns['media-tagID']),
    payload_locked_documents_rels_search_id_idx: index(
      'payload_locked_documents_rels_search_id_idx',
    ).on(columns.searchID),
    payload_locked_documents_rels_payload_jobs_id_idx: index(
      'payload_locked_documents_rels_payload_jobs_id_idx',
    ).on(columns['payload-jobsID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    tenantsIdFk: foreignKey({
      columns: [columns['tenantsID']],
      foreignColumns: [tenants.id],
      name: 'payload_locked_documents_rels_tenants_fk',
    }).onDelete('cascade'),
    headersIdFk: foreignKey({
      columns: [columns['headersID']],
      foreignColumns: [headers.id],
      name: 'payload_locked_documents_rels_headers_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'payload_locked_documents_rels_pages_fk',
    }).onDelete('cascade'),
    footersIdFk: foreignKey({
      columns: [columns['footersID']],
      foreignColumns: [footers.id],
      name: 'payload_locked_documents_rels_footers_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    'media-tagIdFk': foreignKey({
      columns: [columns['media-tagID']],
      foreignColumns: [media_tag.id],
      name: 'payload_locked_documents_rels_media_tag_fk',
    }).onDelete('cascade'),
    searchIdFk: foreignKey({
      columns: [columns['searchID']],
      foreignColumns: [search.id],
      name: 'payload_locked_documents_rels_search_fk',
    }).onDelete('cascade'),
    'payload-jobsIdFk': foreignKey({
      columns: [columns['payload-jobsID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_locked_documents_rels_payload_jobs_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const relations_users_roles = relations(users_roles, ({ one }) => ({
  parent: one(users, {
    fields: [users_roles.parent],
    references: [users.id],
    relationName: 'roles',
  }),
}))
export const relations_users_tenants_roles = relations(users_tenants_roles, ({ one }) => ({
  parent: one(users_tenants, {
    fields: [users_tenants_roles.parent],
    references: [users_tenants.id],
    relationName: 'roles',
  }),
}))
export const relations_users_tenants = relations(users_tenants, ({ one, many }) => ({
  _parentID: one(users, {
    fields: [users_tenants._parentID],
    references: [users.id],
    relationName: 'tenants',
  }),
  tenant: one(tenants, {
    fields: [users_tenants.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  roles: many(users_tenants_roles, {
    relationName: 'roles',
  }),
}))
export const relations_users = relations(users, ({ many }) => ({
  roles: many(users_roles, {
    relationName: 'roles',
  }),
  tenants: many(users_tenants, {
    relationName: 'tenants',
  }),
}))
export const relations_tenants_locales = relations(tenants_locales, ({ one }) => ({
  _parentID: one(tenants, {
    fields: [tenants_locales._parentID],
    references: [tenants.id],
    relationName: '_locales',
  }),
  meta_image: one(media, {
    fields: [tenants_locales.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
}))
export const relations_tenants = relations(tenants, ({ many }) => ({
  _locales: many(tenants_locales, {
    relationName: '_locales',
  }),
}))
export const relations_headers_navigation_link_navigation_child = relations(
  headers_navigation_link_navigation_child,
  ({ one }) => ({
    _parentID: one(headers_navigation, {
      fields: [headers_navigation_link_navigation_child._parentID],
      references: [headers_navigation.id],
      relationName: 'link_navigationChild',
    }),
  }),
)
export const relations_headers_navigation = relations(headers_navigation, ({ one, many }) => ({
  _parentID: one(headers, {
    fields: [headers_navigation._parentID],
    references: [headers.id],
    relationName: 'navigation',
  }),
  link_navigationChild: many(headers_navigation_link_navigation_child, {
    relationName: 'link_navigationChild',
  }),
}))
export const relations_headers_rels = relations(headers_rels, ({ one }) => ({
  parent: one(headers, {
    fields: [headers_rels.parent],
    references: [headers.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [headers_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
}))
export const relations_headers = relations(headers, ({ one, many }) => ({
  tenant: one(tenants, {
    fields: [headers.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  navigation: many(headers_navigation, {
    relationName: 'navigation',
  }),
  _rels: many(headers_rels, {
    relationName: '_rels',
  }),
}))
export const relations_pages_blocks_text_image = relations(pages_blocks_text_image, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_text_image._parentID],
    references: [pages.id],
    relationName: '_blocks_textImage',
  }),
}))
export const relations_pages_blocks_image_grid_images = relations(
  pages_blocks_image_grid_images,
  ({ one }) => ({
    _parentID: one(pages_blocks_image_grid, {
      fields: [pages_blocks_image_grid_images._parentID],
      references: [pages_blocks_image_grid.id],
      relationName: 'images',
    }),
    image: one(media, {
      fields: [pages_blocks_image_grid_images.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations_pages_blocks_image_grid = relations(
  pages_blocks_image_grid,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_image_grid._parentID],
      references: [pages.id],
      relationName: '_blocks_imageGrid',
    }),
    images: many(pages_blocks_image_grid_images, {
      relationName: 'images',
    }),
  }),
)
export const relations_pages_blocks_banner = relations(pages_blocks_banner, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_banner._parentID],
    references: [pages.id],
    relationName: '_blocks_banner',
  }),
  backgroundImage: one(media, {
    fields: [pages_blocks_banner.backgroundImage],
    references: [media.id],
    relationName: 'backgroundImage',
  }),
}))
export const relations_pages_blocks_spacer = relations(pages_blocks_spacer, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_spacer._parentID],
    references: [pages.id],
    relationName: '_blocks_spacer',
  }),
}))
export const relations_pages_blocks_product_grid = relations(
  pages_blocks_product_grid,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_product_grid._parentID],
      references: [pages.id],
      relationName: '_blocks_productGrid',
    }),
  }),
)
export const relations_pages_blocks_text = relations(pages_blocks_text, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_text._parentID],
    references: [pages.id],
    relationName: '_blocks_text',
  }),
}))
export const relations_pages_blocks_benefits_benefits = relations(
  pages_blocks_benefits_benefits,
  ({ one }) => ({
    _parentID: one(pages_blocks_benefits, {
      fields: [pages_blocks_benefits_benefits._parentID],
      references: [pages_blocks_benefits.id],
      relationName: 'benefits',
    }),
    icon: one(media, {
      fields: [pages_blocks_benefits_benefits.icon],
      references: [media.id],
      relationName: 'icon',
    }),
  }),
)
export const relations_pages_blocks_benefits = relations(
  pages_blocks_benefits,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_benefits._parentID],
      references: [pages.id],
      relationName: '_blocks_benefits',
    }),
    benefits: many(pages_blocks_benefits_benefits, {
      relationName: 'benefits',
    }),
  }),
)
export const relations_pages_blocks_three_columns_cells = relations(
  pages_blocks_three_columns_cells,
  ({ one }) => ({
    _parentID: one(pages_blocks_three_columns, {
      fields: [pages_blocks_three_columns_cells._parentID],
      references: [pages_blocks_three_columns.id],
      relationName: 'cells',
    }),
  }),
)
export const relations_pages_blocks_three_columns = relations(
  pages_blocks_three_columns,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_three_columns._parentID],
      references: [pages.id],
      relationName: '_blocks_threeColumns',
    }),
    cells: many(pages_blocks_three_columns_cells, {
      relationName: 'cells',
    }),
  }),
)
export const relations_pages_blocks_cards_cards = relations(
  pages_blocks_cards_cards,
  ({ one }) => ({
    _parentID: one(pages_blocks_cards, {
      fields: [pages_blocks_cards_cards._parentID],
      references: [pages_blocks_cards.id],
      relationName: 'cards',
    }),
    image: one(media, {
      fields: [pages_blocks_cards_cards.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations_pages_blocks_cards = relations(pages_blocks_cards, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_cards._parentID],
    references: [pages.id],
    relationName: '_blocks_cards',
  }),
  cards: many(pages_blocks_cards_cards, {
    relationName: 'cards',
  }),
}))
export const relations_pages_blocks_hero = relations(pages_blocks_hero, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_hero._parentID],
    references: [pages.id],
    relationName: '_blocks_hero',
  }),
  backgroundImage: one(media, {
    fields: [pages_blocks_hero.backgroundImage],
    references: [media.id],
    relationName: 'backgroundImage',
  }),
}))
export const relations_pages_blocks_text_cards_cards = relations(
  pages_blocks_text_cards_cards,
  ({ one }) => ({
    _parentID: one(pages_blocks_text_cards, {
      fields: [pages_blocks_text_cards_cards._parentID],
      references: [pages_blocks_text_cards.id],
      relationName: 'cards',
    }),
  }),
)
export const relations_pages_blocks_text_cards = relations(
  pages_blocks_text_cards,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_text_cards._parentID],
      references: [pages.id],
      relationName: '_blocks_textCards',
    }),
    cards: many(pages_blocks_text_cards_cards, {
      relationName: 'cards',
    }),
  }),
)
export const relations_pages_blocks_two_columns_cells = relations(
  pages_blocks_two_columns_cells,
  ({ one }) => ({
    _parentID: one(pages_blocks_two_columns, {
      fields: [pages_blocks_two_columns_cells._parentID],
      references: [pages_blocks_two_columns.id],
      relationName: 'cells',
    }),
  }),
)
export const relations_pages_blocks_two_columns = relations(
  pages_blocks_two_columns,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_two_columns._parentID],
      references: [pages.id],
      relationName: '_blocks_twoColumns',
    }),
    cells: many(pages_blocks_two_columns_cells, {
      relationName: 'cells',
    }),
  }),
)
export const relations_pages_blocks_image_cards_cards = relations(
  pages_blocks_image_cards_cards,
  ({ one }) => ({
    _parentID: one(pages_blocks_image_cards, {
      fields: [pages_blocks_image_cards_cards._parentID],
      references: [pages_blocks_image_cards.id],
      relationName: 'cards',
    }),
    image: one(media, {
      fields: [pages_blocks_image_cards_cards.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations_pages_blocks_image_cards = relations(
  pages_blocks_image_cards,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_image_cards._parentID],
      references: [pages.id],
      relationName: '_blocks_imageCards',
    }),
    cards: many(pages_blocks_image_cards_cards, {
      relationName: 'cards',
    }),
  }),
)
export const relations_pages_locales = relations(pages_locales, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_locales._parentID],
    references: [pages.id],
    relationName: '_locales',
  }),
  meta_image: one(media, {
    fields: [pages_locales.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
}))
export const relations_pages_rels = relations(pages_rels, ({ one }) => ({
  parent: one(pages, {
    fields: [pages_rels.parent],
    references: [pages.id],
    relationName: '_rels',
  }),
  mediaID: one(media, {
    fields: [pages_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
  pagesID: one(pages, {
    fields: [pages_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
}))
export const relations_pages = relations(pages, ({ one, many }) => ({
  tenant: one(tenants, {
    fields: [pages.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  _blocks_textImage: many(pages_blocks_text_image, {
    relationName: '_blocks_textImage',
  }),
  _blocks_imageGrid: many(pages_blocks_image_grid, {
    relationName: '_blocks_imageGrid',
  }),
  _blocks_banner: many(pages_blocks_banner, {
    relationName: '_blocks_banner',
  }),
  _blocks_spacer: many(pages_blocks_spacer, {
    relationName: '_blocks_spacer',
  }),
  _blocks_productGrid: many(pages_blocks_product_grid, {
    relationName: '_blocks_productGrid',
  }),
  _blocks_text: many(pages_blocks_text, {
    relationName: '_blocks_text',
  }),
  _blocks_benefits: many(pages_blocks_benefits, {
    relationName: '_blocks_benefits',
  }),
  _blocks_threeColumns: many(pages_blocks_three_columns, {
    relationName: '_blocks_threeColumns',
  }),
  _blocks_cards: many(pages_blocks_cards, {
    relationName: '_blocks_cards',
  }),
  _blocks_hero: many(pages_blocks_hero, {
    relationName: '_blocks_hero',
  }),
  _blocks_textCards: many(pages_blocks_text_cards, {
    relationName: '_blocks_textCards',
  }),
  _blocks_twoColumns: many(pages_blocks_two_columns, {
    relationName: '_blocks_twoColumns',
  }),
  _blocks_imageCards: many(pages_blocks_image_cards, {
    relationName: '_blocks_imageCards',
  }),
  parent: one(pages, {
    fields: [pages.parent],
    references: [pages.id],
    relationName: 'parent',
  }),
  _locales: many(pages_locales, {
    relationName: '_locales',
  }),
  _rels: many(pages_rels, {
    relationName: '_rels',
  }),
}))
export const relations__pages_v_blocks_text_image = relations(
  _pages_v_blocks_text_image,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_text_image._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_textImage',
    }),
  }),
)
export const relations__pages_v_blocks_image_grid_images = relations(
  _pages_v_blocks_image_grid_images,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_image_grid, {
      fields: [_pages_v_blocks_image_grid_images._parentID],
      references: [_pages_v_blocks_image_grid.id],
      relationName: 'images',
    }),
    image: one(media, {
      fields: [_pages_v_blocks_image_grid_images.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations__pages_v_blocks_image_grid = relations(
  _pages_v_blocks_image_grid,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_image_grid._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_imageGrid',
    }),
    images: many(_pages_v_blocks_image_grid_images, {
      relationName: 'images',
    }),
  }),
)
export const relations__pages_v_blocks_banner = relations(_pages_v_blocks_banner, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_banner._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_banner',
  }),
  backgroundImage: one(media, {
    fields: [_pages_v_blocks_banner.backgroundImage],
    references: [media.id],
    relationName: 'backgroundImage',
  }),
}))
export const relations__pages_v_blocks_spacer = relations(_pages_v_blocks_spacer, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_spacer._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_spacer',
  }),
}))
export const relations__pages_v_blocks_product_grid = relations(
  _pages_v_blocks_product_grid,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_product_grid._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_productGrid',
    }),
  }),
)
export const relations__pages_v_blocks_text = relations(_pages_v_blocks_text, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_text._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_text',
  }),
}))
export const relations__pages_v_blocks_benefits_benefits = relations(
  _pages_v_blocks_benefits_benefits,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_benefits, {
      fields: [_pages_v_blocks_benefits_benefits._parentID],
      references: [_pages_v_blocks_benefits.id],
      relationName: 'benefits',
    }),
    icon: one(media, {
      fields: [_pages_v_blocks_benefits_benefits.icon],
      references: [media.id],
      relationName: 'icon',
    }),
  }),
)
export const relations__pages_v_blocks_benefits = relations(
  _pages_v_blocks_benefits,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_benefits._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_benefits',
    }),
    benefits: many(_pages_v_blocks_benefits_benefits, {
      relationName: 'benefits',
    }),
  }),
)
export const relations__pages_v_blocks_three_columns_cells = relations(
  _pages_v_blocks_three_columns_cells,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_three_columns, {
      fields: [_pages_v_blocks_three_columns_cells._parentID],
      references: [_pages_v_blocks_three_columns.id],
      relationName: 'cells',
    }),
  }),
)
export const relations__pages_v_blocks_three_columns = relations(
  _pages_v_blocks_three_columns,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_three_columns._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_threeColumns',
    }),
    cells: many(_pages_v_blocks_three_columns_cells, {
      relationName: 'cells',
    }),
  }),
)
export const relations__pages_v_blocks_cards_cards = relations(
  _pages_v_blocks_cards_cards,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_cards, {
      fields: [_pages_v_blocks_cards_cards._parentID],
      references: [_pages_v_blocks_cards.id],
      relationName: 'cards',
    }),
    image: one(media, {
      fields: [_pages_v_blocks_cards_cards.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations__pages_v_blocks_cards = relations(
  _pages_v_blocks_cards,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_cards._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_cards',
    }),
    cards: many(_pages_v_blocks_cards_cards, {
      relationName: 'cards',
    }),
  }),
)
export const relations__pages_v_blocks_hero = relations(_pages_v_blocks_hero, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_hero._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_hero',
  }),
  backgroundImage: one(media, {
    fields: [_pages_v_blocks_hero.backgroundImage],
    references: [media.id],
    relationName: 'backgroundImage',
  }),
}))
export const relations__pages_v_blocks_text_cards_cards = relations(
  _pages_v_blocks_text_cards_cards,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_text_cards, {
      fields: [_pages_v_blocks_text_cards_cards._parentID],
      references: [_pages_v_blocks_text_cards.id],
      relationName: 'cards',
    }),
  }),
)
export const relations__pages_v_blocks_text_cards = relations(
  _pages_v_blocks_text_cards,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_text_cards._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_textCards',
    }),
    cards: many(_pages_v_blocks_text_cards_cards, {
      relationName: 'cards',
    }),
  }),
)
export const relations__pages_v_blocks_two_columns_cells = relations(
  _pages_v_blocks_two_columns_cells,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_two_columns, {
      fields: [_pages_v_blocks_two_columns_cells._parentID],
      references: [_pages_v_blocks_two_columns.id],
      relationName: 'cells',
    }),
  }),
)
export const relations__pages_v_blocks_two_columns = relations(
  _pages_v_blocks_two_columns,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_two_columns._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_twoColumns',
    }),
    cells: many(_pages_v_blocks_two_columns_cells, {
      relationName: 'cells',
    }),
  }),
)
export const relations__pages_v_blocks_image_cards_cards = relations(
  _pages_v_blocks_image_cards_cards,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_image_cards, {
      fields: [_pages_v_blocks_image_cards_cards._parentID],
      references: [_pages_v_blocks_image_cards.id],
      relationName: 'cards',
    }),
    image: one(media, {
      fields: [_pages_v_blocks_image_cards_cards.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations__pages_v_blocks_image_cards = relations(
  _pages_v_blocks_image_cards,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_image_cards._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_imageCards',
    }),
    cards: many(_pages_v_blocks_image_cards_cards, {
      relationName: 'cards',
    }),
  }),
)
export const relations__pages_v_locales = relations(_pages_v_locales, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_locales._parentID],
    references: [_pages_v.id],
    relationName: '_locales',
  }),
  version_meta_image: one(media, {
    fields: [_pages_v_locales.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
}))
export const relations__pages_v_rels = relations(_pages_v_rels, ({ one }) => ({
  parent: one(_pages_v, {
    fields: [_pages_v_rels.parent],
    references: [_pages_v.id],
    relationName: '_rels',
  }),
  mediaID: one(media, {
    fields: [_pages_v_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
  pagesID: one(pages, {
    fields: [_pages_v_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
}))
export const relations__pages_v = relations(_pages_v, ({ one, many }) => ({
  parent: one(pages, {
    fields: [_pages_v.parent],
    references: [pages.id],
    relationName: 'parent',
  }),
  version_tenant: one(tenants, {
    fields: [_pages_v.version_tenant],
    references: [tenants.id],
    relationName: 'version_tenant',
  }),
  _blocks_textImage: many(_pages_v_blocks_text_image, {
    relationName: '_blocks_textImage',
  }),
  _blocks_imageGrid: many(_pages_v_blocks_image_grid, {
    relationName: '_blocks_imageGrid',
  }),
  _blocks_banner: many(_pages_v_blocks_banner, {
    relationName: '_blocks_banner',
  }),
  _blocks_spacer: many(_pages_v_blocks_spacer, {
    relationName: '_blocks_spacer',
  }),
  _blocks_productGrid: many(_pages_v_blocks_product_grid, {
    relationName: '_blocks_productGrid',
  }),
  _blocks_text: many(_pages_v_blocks_text, {
    relationName: '_blocks_text',
  }),
  _blocks_benefits: many(_pages_v_blocks_benefits, {
    relationName: '_blocks_benefits',
  }),
  _blocks_threeColumns: many(_pages_v_blocks_three_columns, {
    relationName: '_blocks_threeColumns',
  }),
  _blocks_cards: many(_pages_v_blocks_cards, {
    relationName: '_blocks_cards',
  }),
  _blocks_hero: many(_pages_v_blocks_hero, {
    relationName: '_blocks_hero',
  }),
  _blocks_textCards: many(_pages_v_blocks_text_cards, {
    relationName: '_blocks_textCards',
  }),
  _blocks_twoColumns: many(_pages_v_blocks_two_columns, {
    relationName: '_blocks_twoColumns',
  }),
  _blocks_imageCards: many(_pages_v_blocks_image_cards, {
    relationName: '_blocks_imageCards',
  }),
  version_parent: one(pages, {
    fields: [_pages_v.version_parent],
    references: [pages.id],
    relationName: 'version_parent',
  }),
  _locales: many(_pages_v_locales, {
    relationName: '_locales',
  }),
  _rels: many(_pages_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_footers_columns = relations(footers_columns, ({ one }) => ({
  _parentID: one(footers, {
    fields: [footers_columns._parentID],
    references: [footers.id],
    relationName: 'columns',
  }),
}))
export const relations_footers = relations(footers, ({ one, many }) => ({
  tenant: one(tenants, {
    fields: [footers.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  columns: many(footers_columns, {
    relationName: 'columns',
  }),
}))
export const relations_media_rels = relations(media_rels, ({ one }) => ({
  parent: one(media, {
    fields: [media_rels.parent],
    references: [media.id],
    relationName: '_rels',
  }),
  'media-tagID': one(media_tag, {
    fields: [media_rels['media-tagID']],
    references: [media_tag.id],
    relationName: 'media-tag',
  }),
}))
export const relations_media = relations(media, ({ many }) => ({
  _rels: many(media_rels, {
    relationName: '_rels',
  }),
}))
export const relations_media_tag = relations(media_tag, () => ({}))
export const relations_search_categories = relations(search_categories, ({ one }) => ({
  _parentID: one(search, {
    fields: [search_categories._parentID],
    references: [search.id],
    relationName: 'categories',
  }),
}))
export const relations_search_locales = relations(search_locales, ({ one }) => ({
  _parentID: one(search, {
    fields: [search_locales._parentID],
    references: [search.id],
    relationName: '_locales',
  }),
}))
export const relations_search_rels = relations(search_rels, ({ one }) => ({
  parent: one(search, {
    fields: [search_rels.parent],
    references: [search.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [search_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
}))
export const relations_search = relations(search, ({ one, many }) => ({
  meta_image: one(media, {
    fields: [search.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  categories: many(search_categories, {
    relationName: 'categories',
  }),
  _locales: many(search_locales, {
    relationName: '_locales',
  }),
  _rels: many(search_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_jobs_log = relations(payload_jobs_log, ({ one }) => ({
  _parentID: one(payload_jobs, {
    fields: [payload_jobs_log._parentID],
    references: [payload_jobs.id],
    relationName: 'log',
  }),
}))
export const relations_payload_jobs = relations(payload_jobs, ({ many }) => ({
  log: many(payload_jobs_log, {
    relationName: 'log',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    tenantsID: one(tenants, {
      fields: [payload_locked_documents_rels.tenantsID],
      references: [tenants.id],
      relationName: 'tenants',
    }),
    headersID: one(headers, {
      fields: [payload_locked_documents_rels.headersID],
      references: [headers.id],
      relationName: 'headers',
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
    footersID: one(footers, {
      fields: [payload_locked_documents_rels.footersID],
      references: [footers.id],
      relationName: 'footers',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    'media-tagID': one(media_tag, {
      fields: [payload_locked_documents_rels['media-tagID']],
      references: [media_tag.id],
      relationName: 'media-tag',
    }),
    searchID: one(search, {
      fields: [payload_locked_documents_rels.searchID],
      references: [search.id],
      relationName: 'search',
    }),
    'payload-jobsID': one(payload_jobs, {
      fields: [payload_locked_documents_rels['payload-jobsID']],
      references: [payload_jobs.id],
      relationName: 'payload-jobs',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))

type DatabaseSchema = {
  enum__locales: typeof enum__locales
  enum_users_roles: typeof enum_users_roles
  enum_users_tenants_roles: typeof enum_users_tenants_roles
  enum_headers_navigation_link_navigation_child_link_type: typeof enum_headers_navigation_link_navigation_child_link_type
  enum_headers_navigation_link_type: typeof enum_headers_navigation_link_type
  enum_pages_blocks_image_grid_images_link_type: typeof enum_pages_blocks_image_grid_images_link_type
  enum_pages_blocks_banner_background: typeof enum_pages_blocks_banner_background
  enum_pages_blocks_text_background: typeof enum_pages_blocks_text_background
  enum_pages_blocks_three_columns_background: typeof enum_pages_blocks_three_columns_background
  enum_pages_blocks_cards_background: typeof enum_pages_blocks_cards_background
  enum_pages_blocks_hero_background: typeof enum_pages_blocks_hero_background
  enum_pages_blocks_text_cards_background: typeof enum_pages_blocks_text_cards_background
  enum_pages_blocks_two_columns_background: typeof enum_pages_blocks_two_columns_background
  enum_pages_blocks_image_cards_cards_link_type: typeof enum_pages_blocks_image_cards_cards_link_type
  enum_pages_blocks_image_cards_cards_link_appearance: typeof enum_pages_blocks_image_cards_cards_link_appearance
  enum_pages_blocks_image_cards_cards_link_size: typeof enum_pages_blocks_image_cards_cards_link_size
  enum_pages_blocks_image_cards_cards_link_color: typeof enum_pages_blocks_image_cards_cards_link_color
  enum_pages_status: typeof enum_pages_status
  enum__pages_v_blocks_image_grid_images_link_type: typeof enum__pages_v_blocks_image_grid_images_link_type
  enum__pages_v_blocks_banner_background: typeof enum__pages_v_blocks_banner_background
  enum__pages_v_blocks_text_background: typeof enum__pages_v_blocks_text_background
  enum__pages_v_blocks_three_columns_background: typeof enum__pages_v_blocks_three_columns_background
  enum__pages_v_blocks_cards_background: typeof enum__pages_v_blocks_cards_background
  enum__pages_v_blocks_hero_background: typeof enum__pages_v_blocks_hero_background
  enum__pages_v_blocks_text_cards_background: typeof enum__pages_v_blocks_text_cards_background
  enum__pages_v_blocks_two_columns_background: typeof enum__pages_v_blocks_two_columns_background
  enum__pages_v_blocks_image_cards_cards_link_type: typeof enum__pages_v_blocks_image_cards_cards_link_type
  enum__pages_v_blocks_image_cards_cards_link_appearance: typeof enum__pages_v_blocks_image_cards_cards_link_appearance
  enum__pages_v_blocks_image_cards_cards_link_size: typeof enum__pages_v_blocks_image_cards_cards_link_size
  enum__pages_v_blocks_image_cards_cards_link_color: typeof enum__pages_v_blocks_image_cards_cards_link_color
  enum__pages_v_version_status: typeof enum__pages_v_version_status
  enum__pages_v_published_locale: typeof enum__pages_v_published_locale
  enum_payload_jobs_log_task_slug: typeof enum_payload_jobs_log_task_slug
  enum_payload_jobs_log_state: typeof enum_payload_jobs_log_state
  enum_payload_jobs_task_slug: typeof enum_payload_jobs_task_slug
  users_roles: typeof users_roles
  users_tenants_roles: typeof users_tenants_roles
  users_tenants: typeof users_tenants
  users: typeof users
  tenants: typeof tenants
  tenants_locales: typeof tenants_locales
  headers_navigation_link_navigation_child: typeof headers_navigation_link_navigation_child
  headers_navigation: typeof headers_navigation
  headers: typeof headers
  headers_rels: typeof headers_rels
  pages_blocks_text_image: typeof pages_blocks_text_image
  pages_blocks_image_grid_images: typeof pages_blocks_image_grid_images
  pages_blocks_image_grid: typeof pages_blocks_image_grid
  pages_blocks_banner: typeof pages_blocks_banner
  pages_blocks_spacer: typeof pages_blocks_spacer
  pages_blocks_product_grid: typeof pages_blocks_product_grid
  pages_blocks_text: typeof pages_blocks_text
  pages_blocks_benefits_benefits: typeof pages_blocks_benefits_benefits
  pages_blocks_benefits: typeof pages_blocks_benefits
  pages_blocks_three_columns_cells: typeof pages_blocks_three_columns_cells
  pages_blocks_three_columns: typeof pages_blocks_three_columns
  pages_blocks_cards_cards: typeof pages_blocks_cards_cards
  pages_blocks_cards: typeof pages_blocks_cards
  pages_blocks_hero: typeof pages_blocks_hero
  pages_blocks_text_cards_cards: typeof pages_blocks_text_cards_cards
  pages_blocks_text_cards: typeof pages_blocks_text_cards
  pages_blocks_two_columns_cells: typeof pages_blocks_two_columns_cells
  pages_blocks_two_columns: typeof pages_blocks_two_columns
  pages_blocks_image_cards_cards: typeof pages_blocks_image_cards_cards
  pages_blocks_image_cards: typeof pages_blocks_image_cards
  pages: typeof pages
  pages_locales: typeof pages_locales
  pages_rels: typeof pages_rels
  _pages_v_blocks_text_image: typeof _pages_v_blocks_text_image
  _pages_v_blocks_image_grid_images: typeof _pages_v_blocks_image_grid_images
  _pages_v_blocks_image_grid: typeof _pages_v_blocks_image_grid
  _pages_v_blocks_banner: typeof _pages_v_blocks_banner
  _pages_v_blocks_spacer: typeof _pages_v_blocks_spacer
  _pages_v_blocks_product_grid: typeof _pages_v_blocks_product_grid
  _pages_v_blocks_text: typeof _pages_v_blocks_text
  _pages_v_blocks_benefits_benefits: typeof _pages_v_blocks_benefits_benefits
  _pages_v_blocks_benefits: typeof _pages_v_blocks_benefits
  _pages_v_blocks_three_columns_cells: typeof _pages_v_blocks_three_columns_cells
  _pages_v_blocks_three_columns: typeof _pages_v_blocks_three_columns
  _pages_v_blocks_cards_cards: typeof _pages_v_blocks_cards_cards
  _pages_v_blocks_cards: typeof _pages_v_blocks_cards
  _pages_v_blocks_hero: typeof _pages_v_blocks_hero
  _pages_v_blocks_text_cards_cards: typeof _pages_v_blocks_text_cards_cards
  _pages_v_blocks_text_cards: typeof _pages_v_blocks_text_cards
  _pages_v_blocks_two_columns_cells: typeof _pages_v_blocks_two_columns_cells
  _pages_v_blocks_two_columns: typeof _pages_v_blocks_two_columns
  _pages_v_blocks_image_cards_cards: typeof _pages_v_blocks_image_cards_cards
  _pages_v_blocks_image_cards: typeof _pages_v_blocks_image_cards
  _pages_v: typeof _pages_v
  _pages_v_locales: typeof _pages_v_locales
  _pages_v_rels: typeof _pages_v_rels
  footers_columns: typeof footers_columns
  footers: typeof footers
  media: typeof media
  media_rels: typeof media_rels
  media_tag: typeof media_tag
  search_categories: typeof search_categories
  search: typeof search
  search_locales: typeof search_locales
  search_rels: typeof search_rels
  payload_jobs_log: typeof payload_jobs_log
  payload_jobs: typeof payload_jobs
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_users_roles: typeof relations_users_roles
  relations_users_tenants_roles: typeof relations_users_tenants_roles
  relations_users_tenants: typeof relations_users_tenants
  relations_users: typeof relations_users
  relations_tenants_locales: typeof relations_tenants_locales
  relations_tenants: typeof relations_tenants
  relations_headers_navigation_link_navigation_child: typeof relations_headers_navigation_link_navigation_child
  relations_headers_navigation: typeof relations_headers_navigation
  relations_headers_rels: typeof relations_headers_rels
  relations_headers: typeof relations_headers
  relations_pages_blocks_text_image: typeof relations_pages_blocks_text_image
  relations_pages_blocks_image_grid_images: typeof relations_pages_blocks_image_grid_images
  relations_pages_blocks_image_grid: typeof relations_pages_blocks_image_grid
  relations_pages_blocks_banner: typeof relations_pages_blocks_banner
  relations_pages_blocks_spacer: typeof relations_pages_blocks_spacer
  relations_pages_blocks_product_grid: typeof relations_pages_blocks_product_grid
  relations_pages_blocks_text: typeof relations_pages_blocks_text
  relations_pages_blocks_benefits_benefits: typeof relations_pages_blocks_benefits_benefits
  relations_pages_blocks_benefits: typeof relations_pages_blocks_benefits
  relations_pages_blocks_three_columns_cells: typeof relations_pages_blocks_three_columns_cells
  relations_pages_blocks_three_columns: typeof relations_pages_blocks_three_columns
  relations_pages_blocks_cards_cards: typeof relations_pages_blocks_cards_cards
  relations_pages_blocks_cards: typeof relations_pages_blocks_cards
  relations_pages_blocks_hero: typeof relations_pages_blocks_hero
  relations_pages_blocks_text_cards_cards: typeof relations_pages_blocks_text_cards_cards
  relations_pages_blocks_text_cards: typeof relations_pages_blocks_text_cards
  relations_pages_blocks_two_columns_cells: typeof relations_pages_blocks_two_columns_cells
  relations_pages_blocks_two_columns: typeof relations_pages_blocks_two_columns
  relations_pages_blocks_image_cards_cards: typeof relations_pages_blocks_image_cards_cards
  relations_pages_blocks_image_cards: typeof relations_pages_blocks_image_cards
  relations_pages_locales: typeof relations_pages_locales
  relations_pages_rels: typeof relations_pages_rels
  relations_pages: typeof relations_pages
  relations__pages_v_blocks_text_image: typeof relations__pages_v_blocks_text_image
  relations__pages_v_blocks_image_grid_images: typeof relations__pages_v_blocks_image_grid_images
  relations__pages_v_blocks_image_grid: typeof relations__pages_v_blocks_image_grid
  relations__pages_v_blocks_banner: typeof relations__pages_v_blocks_banner
  relations__pages_v_blocks_spacer: typeof relations__pages_v_blocks_spacer
  relations__pages_v_blocks_product_grid: typeof relations__pages_v_blocks_product_grid
  relations__pages_v_blocks_text: typeof relations__pages_v_blocks_text
  relations__pages_v_blocks_benefits_benefits: typeof relations__pages_v_blocks_benefits_benefits
  relations__pages_v_blocks_benefits: typeof relations__pages_v_blocks_benefits
  relations__pages_v_blocks_three_columns_cells: typeof relations__pages_v_blocks_three_columns_cells
  relations__pages_v_blocks_three_columns: typeof relations__pages_v_blocks_three_columns
  relations__pages_v_blocks_cards_cards: typeof relations__pages_v_blocks_cards_cards
  relations__pages_v_blocks_cards: typeof relations__pages_v_blocks_cards
  relations__pages_v_blocks_hero: typeof relations__pages_v_blocks_hero
  relations__pages_v_blocks_text_cards_cards: typeof relations__pages_v_blocks_text_cards_cards
  relations__pages_v_blocks_text_cards: typeof relations__pages_v_blocks_text_cards
  relations__pages_v_blocks_two_columns_cells: typeof relations__pages_v_blocks_two_columns_cells
  relations__pages_v_blocks_two_columns: typeof relations__pages_v_blocks_two_columns
  relations__pages_v_blocks_image_cards_cards: typeof relations__pages_v_blocks_image_cards_cards
  relations__pages_v_blocks_image_cards: typeof relations__pages_v_blocks_image_cards
  relations__pages_v_locales: typeof relations__pages_v_locales
  relations__pages_v_rels: typeof relations__pages_v_rels
  relations__pages_v: typeof relations__pages_v
  relations_footers_columns: typeof relations_footers_columns
  relations_footers: typeof relations_footers
  relations_media_rels: typeof relations_media_rels
  relations_media: typeof relations_media
  relations_media_tag: typeof relations_media_tag
  relations_search_categories: typeof relations_search_categories
  relations_search_locales: typeof relations_search_locales
  relations_search_rels: typeof relations_search_rels
  relations_search: typeof relations_search
  relations_payload_jobs_log: typeof relations_payload_jobs_log
  relations_payload_jobs: typeof relations_payload_jobs
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
